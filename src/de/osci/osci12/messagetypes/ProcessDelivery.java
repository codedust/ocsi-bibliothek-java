/* Generated by Together */
package de.osci.osci12.messagetypes;

import java.io.IOException;
import java.security.NoSuchAlgorithmException;

import de.osci.helper.Tools;
import de.osci.osci12.OSCIException;
import de.osci.osci12.common.Constants;
import de.osci.osci12.common.Constants.HeaderTags;
import de.osci.osci12.common.DialogHandler;
import de.osci.osci12.messageparts.Attachment;
import de.osci.osci12.messageparts.Body;
import de.osci.osci12.messageparts.Content;
import de.osci.osci12.messageparts.ContentContainer;
import de.osci.osci12.messageparts.EncryptedDataOSCI;
import de.osci.osci12.messageparts.Inspection;
import de.osci.osci12.messageparts.ProcessCardBundle;
import de.osci.osci12.messageparts.Timestamp;
import de.osci.osci12.roles.Addressee;
import de.osci.osci12.roles.Intermed;
import de.osci.osci12.roles.OSCIRoleException;
import de.osci.osci12.soapheader.DesiredLanguagesH;
import de.osci.osci12.soapheader.IntermediaryCertificatesH;
import de.osci.osci12.soapheader.OsciH;
import eu.osci.ws._2014._10.transport.MessageMetaData;


/**
 * <p>Diese Klasse repräsentiert Nachrichtenobjekte für Bearbeitungsaufträge.
 * Der Intermediär erzeugt nach dem Erhalt eines Abwicklungsauftrags eine
 * Instanz dieser Klasse und sendet die Nachricht an den Empfänger (hier als Supplier) .
 * Als Antwort auf diese Nachricht muss der Empfänger ein
 * ResponseToProcessDelivery-Nachrichtenobjekt mit einer Rückmeldung (Feedback)
 * aufbauen und an den Intermediär zurücksenden.</p>
 *
 * <p>Copyright © 2023 Governikus GmbH &amp; Co. KG, Germany</p>
 * <p>Erstellt von Governikus GmbH &amp; Co. KG</p>
 * <p>Diese Bibliothek kann von jedermann nach Maßgabe der European Union
 *  Public Licence genutzt werden.</p><p>Die Lizenzbestimmungen können
 * unter der URL <a href="https://eupl.eu/">https://eupl.eu/</a> abgerufen werden.
 *
 *
 * @author R. Lindemann, N. Büngener
 * @version 2.4.1
 *
 * @see de.osci.osci12.messagetypes.ResponseToProcessDelivery
 */
public class ProcessDelivery extends OSCIRequest implements ContentPackageI
{
  //  private static Log log = LogFactory.getLog(ProcessDelivery.class);
  ProcessCardBundle processCardBundle;

  ProcessDelivery(MediateDelivery md) throws OSCIRoleException,
                                             NoSuchAlgorithmException
  {
    super(new DialogHandler((Intermed) md.dialogHandler.getSupplier(), md.addressee,
                            (de.osci.osci12.extinterfaces.TransportI) null));
    messageType = PROCESS_DELIVERY;
    uriReceiver = md.uriReceiver;
    addressee = md.addressee;
    originator = md.originator;
    desiredLanguagesH = new DesiredLanguagesH(md.desiredLanguagesH.getLanguageList());

    ContentContainer[] con = md.getContentContainer();

    for (int i = 0; i < con.length; i++)
      addContentContainer(con[i]);

    EncryptedDataOSCI[] enc = md.getEncryptedData();

    for (int i = 0; i < enc.length; i++)
      addEncryptedData(enc[i]);

    Attachment[] att = md.getAttachments();

    for (int i = 0; i < att.length; i++)
      addAttachment(att[i]);

    for (int i = 0; i < md.getOtherAuthors().length; i++)
      otherAutors.put(md.getOtherAuthors()[i].id, md.getOtherAuthors()[i]);

    for (int i = 0; i < md.getOtherReaders().length; i++)
      otherReaders.put(md.getOtherReaders()[i].id, md.getOtherReaders()[i]);

    dialogHandler.setEncryption(md.getDialogHandler().isEncryption());
    dialogHandler.getControlblock().setResponse(null);
    dialogHandler.getControlblock().setChallenge(Tools.createRandom(10));
    dialogHandler.getControlblock().setConversationID(null);
    dialogHandler.getControlblock().setSequenceNumber(-1);
  }

  ProcessDelivery(DialogHandler dh)
  {
    super(dh);
    addressee = ((Addressee) dh.getSupplier());
    messageType = PROCESS_DELIVERY;
  }

  /**
   * Creates a new ProcessDelivery object.
   */
  public ProcessDelivery()
  {
    messageType = PROCESS_DELIVERY;
  }

  /**
   * Diese Methode liefert den Laufzettel der Zustellung zurück oder null,
   * wenn bei der Verarbeitung der Nachricht ein Fehler aufgetreten ist.
   * Die Informationen im Laufzettel können auch direkt über die einzelnen
   * getX()-Methoden ausgewertet werden.
   *
   * @return den Laufzettel als ProcessCardBundle-Objekt, im Fehlerfall null
   * @see #getTimestampCreation()
   * @see #getTimestampForwarding()
   * @see #getInspections()
   * @see #getSubject()
   * @see #getRecentModification()
   * @see #getMessageId()
   */
  public ProcessCardBundle getProcessCardBundle()
  {
    return processCardBundle;
  }

  /**
   * Liefert die in die Nachricht eingestellten (unverschlüsselten) Inhaltsdaten als ContentContainer-Objekte.
   * @return enthaltene ContentContainer mit Inhaltsdaten
   * @see de.osci.osci12.messageparts.ContentContainer
   */
  public ContentContainer[] getContentContainer()
  {
    return super.getContentContainer();
  }

  /**
   * Durchsucht <b>die unverschlüsselten</b> Inhaltsdaten nach dem ContentContainer
   * mit der übergebenen RefID.
   * @param refID zu suchende RefID
   * @return den zugehörigen ContentContainer oder null, wenn die Referenz
   * nicht gefunden wurde.
   */
  public ContentContainer getContentContainerByRefID(String refID)
  {
	  return super.getContentContainerByRefID(refID);
  }

  /**
   * Durchsucht <b>die unverschlüsselten</b> ContentContainer nach dem Content
   * mit der übergebenen RefID.
   * @param refID zu suchende RefID
   * @return den zugehörigen Content oder null, wenn die Referenz
   * nicht gefunden wurde.
   */
  public Content getContentByRefID(String refID)
  {
	return super.getContentByRefID(refID);
  }

  /**
   * Liefert die in die Nachricht eingestellten verschlüsselten Inhaltsdaten
   * als EncryptedData-Objekte.
   * @return enthaltene EncryptedData-Objekt mit verschlüsselten Inhaltsdaten
   * @see EncryptedDataOSCI
   */
  public EncryptedDataOSCI[] getEncryptedData()
  {
    return super.getEncryptedData();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void addMessageMetaDataXTA2V3(MessageMetaData mmd)
  {
    super.addMessageMetaDataXTA2V3(mmd);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void addMessageMetaDataXTA2V3(String mmd)
  {
    super.addMessageMetaDataXTA2V3(mmd);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public MessageMetaData getMessageMetaDataXTA2V3()
  {
    return super.getMessageMetaDataXTA2V3();
  }

  /**
   * Liefert den im Laufzettel enthaltenen Zeitstempel vom Zeitpunkt des Eingangs
   * des Abwicklungsauftrags beim Intermediär (ggf. null).
   * @return Zeitstempel der Einreichung beim Intermediär
   * @see #getProcessCardBundle()
   */
  public Timestamp getTimestampCreation()
  {
    if (processCardBundle != null)
      return processCardBundle.getCreation();
    else

      return null;
  }

  /**
   * Liefert den im Laufzettel enthaltenen Zeitstempel vom Zeitpunkt des
   * vollständigen Aufbaus des Bearbeitungsauftrags vom Intermediär für den Empfänger (ggf. null).
   * @return Zeitstempel der Erstellung des Bearbeitungsauftrags durch den Intermediär
   * @see #getProcessCardBundle()
   */
  public Timestamp getTimestampForwarding()
  {
    if (processCardBundle != null)
      return processCardBundle.getForwarding();
    else

      return null;
  }

  /**
   * Liefert die Ergebnisse der Zertifikatsprüfungen in Form von Inspection-Objekten,
   * die im ProcessCardBundle-Objekt enthalten sind (ggf. null).
   * @see #getProcessCardBundle()
   * @return Inspection
   */
  public Inspection[] getInspections()
  {
    if (processCardBundle != null)
      return processCardBundle.getInspections();
    else

      return null;
  }

  //  void setInspections(Inspection[] inspections) {this.inspections = inspections;}
  /**
   * Liefert den im Laufzettel enthaltenen Betreff-Eintrag (ggf. null).
   * @return den Betreff der Zustellung
   * @see #getProcessCardBundle()
   */
  public String getSubject()
  {
    if (processCardBundle != null)
      return processCardBundle.getSubject();
    else

      return null;
  }

  /**
   * Liefert das Datum der letzten Änderung des Laufzettels (ggf. null). Das Format
   * entspricht dem XML-Schema nach http://www.w3.org/TR/xmlschema-2/#dateTime
   * @return Datum der letzten Änderung
   * @see #getProcessCardBundle()
   */
  public String getRecentModification()
  {
    if (processCardBundle != null)
      return processCardBundle.getRecentModification();
    else

      return null;
  }

  /**
   * Liefert die Message-ID der Nachricht.
   * @return Message-ID
   * @see #getProcessCardBundle()
   */
  public String getMessageId()
  {
    if (processCardBundle != null)
      return processCardBundle.getMessageId();
    else

      return null;
  }

  /**
   * Liefert die vom Intermediär mitgesendete Message-ID für die Antwortnachricht.
   * @return Message-ID für Antwortnachricht oder null, wenn keine Protokollierung
   * verlangt ist.
   */
  public String getMessageIdResponse()
  {
    return messageId;
  }

  void sign()
     throws IOException,
            OSCIException,
            de.osci.osci12.common.OSCICancelledException,
            java.security.NoSuchAlgorithmException
  {
    super.sign();
    // Der IntemedCertHeader liegt hier weiter unten
    messageParts.set(5, intermediaryCertificatesH);
    messageParts.set(3, null);
  }

  /**
   * undocumented
   *
   * @throws OSCIRoleException undocumented
   * @throws IOException undocumented
   */
  protected void compose() throws OSCIException,
                                  IOException,
                                  NoSuchAlgorithmException
  {
    super.compose();
    messageParts.set(3, null);

    if (processCardBundle != null)
    {
      String pdh = "<" + osciNSPrefix + ":MessageIdResponse>" +
                   de.osci.helper.Base64.encode(messageId.getBytes(Constants.CHAR_ENCODING)) + "</" + osciNSPrefix +
                   ":MessageIdResponse>" + processCardBundle.writeToString();
      osciH = new OsciH(HeaderTags.processDelivery.getElementName(), "" + pdh);
    }
    else
      osciH = new OsciH(HeaderTags.processDelivery.getElementName(), "");

    messageParts.add(osciH);

    if (dialogHandler.getClient().hasCipherCertificate())
    {
      if (intermediaryCertificatesH == null)
        intermediaryCertificatesH = new IntermediaryCertificatesH();

      intermediaryCertificatesH.setCipherCertificateIntermediary((Intermed) dialogHandler.getClient());
    }

    messageParts.add(intermediaryCertificatesH);
    createNonIntermediaryCertificatesH();
    messageParts.add(nonIntermediaryCertificatesH);
    if(featureDescription!=null && dialogHandler.isSendFeatureDescription())
    {
      messageParts.add(featureDescription);
    }
    messageParts.addAll(customHeaders);
    body = new Body(getContentContainer(), getEncryptedData());
    messageParts.add(body);
    stateOfMsg |= STATE_COMPOSED;
  }
}
